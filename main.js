/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const pluginName = 'Drag and Drop Blocks';
const DEFAULT_SETTINGS = {
    mySetting: 'default'
};
class MyPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("loading plugin: " + pluginName);
            this.blockRefStartLine = null;
            this.blockRefEmbed = null;
            this.blockRefNewLine = null;
            this.originalText = null;
            this.blockRefDragState = null;
            this.blockRefStartLeaf = null;
            this.blockRefClientY = null;
            this.blockRefModDrop = { alt: null, ctrl: null, shift: null };
            this.blockRefModDrag = { alt: null, ctrl: null, shift: null };
            yield this.loadSettings();
            this.addSettingTab(new SampleSettingTab(this.app, this));
            this.app.workspace.onLayoutReady(this.onLayoutReady.bind(this));
        });
    }
    onLayoutReady() {
        //Find the main DIV that holds all the markdown panes
        const actDoc = document.getElementsByClassName('workspace-split mod-vertical mod-root')[0];
        this.registerDomEvent(actDoc, 'mouseover', (evt) => {
            const mainDiv = evt.target;
            if (mainDiv.className === 'CodeMirror-linenumber CodeMirror-gutter-elt') {
                let oldElem = document.getElementById('block-ref-hover');
                if (oldElem) {
                    oldElem.remove();
                }
                let docBody = document.getElementsByTagName('body')[0];
                const newElement = document.createElement("div");
                newElement.id = 'block-ref-hover';
                docBody.insertBefore(newElement, null);
                newElement.draggable = true;
                //newElement.innerText = "◎";
                //newElement.innerText = "❖";
                //newElement.style.fontSize = "12px";
                newElement.innerText = "⋮⋮";
                newElement.style.fontSize = "16px";
                newElement.style.fontWeight = "bold";
                newElement.style.color = "var(--text-accent-hover)";
                //newElement.style.cursor = "grab";
                newElement.style.cursor = "move";
                newElement.style.position = "absolute";
                let targetRect = mainDiv.getBoundingClientRect();
                newElement.style.top = `${targetRect.top - 1}px`;
                newElement.style.left = `${targetRect.left - 8}px`;
                this.registerDomEvent(newElement, 'mouseover', (evt) => {
                    const eventDiv = evt.target;
                    eventDiv.style.color = "var(--text-accent-hover)";
                });
                this.registerDomEvent(newElement, 'mouseout', (evt) => {
                    const eventDiv = evt.target;
                    eventDiv.style.color = "transparent";
                });
                this.registerDomEvent(mainDiv, 'mouseout', (evt) => {
                    const oldElem = document.getElementById('block-ref-hover');
                    if (oldElem) {
                        oldElem.style.color = "transparent";
                    }
                });
                //Find the leaf that is being hovered over
                let leafEl = this.app.workspace.containerEl.find(".workspace-leaf:hover");
                let allLeaves = this.app.workspace.getLeavesOfType("markdown");
                let hoveredLeaf = allLeaves.find(eachLeaf => eachLeaf.containerEl == leafEl);
                if (hoveredLeaf) {
                    this.blockRefStartLeaf = hoveredLeaf;
                    this.blockRefClientY = evt.clientY + 1;
                }
                this.registerDomEvent(newElement, 'dragstart', (evt) => {
                    let hoveredLeaf = this.blockRefStartLeaf;
                    let mdView;
                    if (hoveredLeaf) {
                        mdView = hoveredLeaf.view;
                    }
                    if (mdView) {
                        this.blockRefModDrag = { alt: evt.altKey, ctrl: (evt.ctrlKey || evt.metaKey), shift: evt.shiftKey };
                        let mdEditor = mdView.editor;
                        let topPos = this.blockRefClientY;
                        //NOTE: mdEditor.posAtCoords(x, y) is equivalent to mdEditor.cm.coordsChar({ left: x, top: y })
                        let thisLine = mdEditor.posAtCoords(0, topPos).line;
                        //mdEditor.setSelection({ line: thisLine, ch: 0 }, { line: thisLine, ch: 9999 });
                        let lineContent = mdEditor.getLine(thisLine);
                        let blockid = '';
                        let finalString = '';
                        let block = '';
                        //No modifier keys held so move the block to the new location
                        if (!this.blockRefModDrag.ctrl && !this.blockRefModDrag.alt && !this.blockRefModDrag.shift) {
                            evt.dataTransfer.setData("text/plain", lineContent);
                        }
                        //Shift key held so copy the block to the new location
                        if (!this.blockRefModDrag.ctrl && !this.blockRefModDrag.alt && this.blockRefModDrag.shift) {
                            evt.dataTransfer.setData("text/plain", lineContent);
                        }
                        //Alt key held to create a block reference (CMD/Ctrl is not working for MACs so going with Alt)
                        if (this.blockRefModDrag.alt && !this.blockRefModDrag.ctrl && !this.blockRefModDrag.shift) {
                            const blockRef = lineContent.match(/ \^(.*)/);
                            if (blockRef) {
                                blockid = blockRef[1];
                                finalString = lineContent;
                            }
                            else {
                                let characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
                                let charactersLength = characters.length;
                                for (var i = 0; i < 7; i++) {
                                    blockid += characters.charAt(Math.floor(Math.random() * charactersLength));
                                }
                                finalString = lineContent + ` ^${blockid}`;
                            }
                            block = `![` + `[${mdView.file.basename}#^${blockid}]]`.split("\n").join("");
                            evt.dataTransfer.setData("text/plain", block);
                        }
                        this.blockRefStartLine = thisLine;
                        this.blockRefEmbed = block;
                        this.blockRefNewLine = finalString;
                        this.originalText = lineContent;
                        this.blockRefDragState = 'start';
                    }
                });
                this.registerDomEvent(newElement, 'dragend', (evt) => {
                    if (this.blockRefDragState === "dropped") {
                        //this.app.workspace.setActiveLeaf(this.blockRefStartLeaf);
                        let mdView;
                        if (this.blockRefStartLeaf) {
                            mdView = this.blockRefStartLeaf.view;
                        }
                        if (mdView) {
                            let mdEditor = mdView.editor;
                            //No modifier keys held so move the block to the new location
                            if (!this.blockRefModDrag.ctrl && !this.blockRefModDrag.alt && !this.blockRefModDrag.shift) {
                                //Delete the original line you dragged
                                mdEditor.setLine(this.blockRefStartLine, '');
                            }
                            //Shift key held so copy the block to the new location
                            if (!this.blockRefModDrag.ctrl && !this.blockRefModDrag.alt && this.blockRefModDrag.shift) ;
                            //Alt key held to create a block reference (CMD/Ctrl is not working for MACs so going with Alt)
                            if (this.blockRefModDrag.alt && !this.blockRefModDrag.ctrl && !this.blockRefModDrag.shift) {
                                mdEditor.setLine(this.blockRefStartLine, this.blockRefNewLine);
                                mdEditor.setSelection({ line: this.blockRefStartLine, ch: 0 }, { line: this.blockRefStartLine, ch: 9999 });
                            }
                        }
                    }
                    if (this.blockRefDragState === 'cancelled') ;
                    let oldElem = document.getElementById('block-ref-hover');
                    if (oldElem) {
                        oldElem.remove();
                    }
                    this.blockRefStartLine = null;
                    this.blockRefEmbed = null;
                    this.blockRefNewLine = null;
                    this.originalText = null;
                    this.blockRefDragState = null;
                    this.blockRefStartLeaf = null;
                    this.blockRefClientY = null;
                    this.blockRefModDrop = { alt: null, ctrl: null, shift: null };
                    this.blockRefModDrag = { alt: null, ctrl: null, shift: null };
                });
            }
            if (evt.ctrlKey && evt.shiftKey) {
                let leafEl = this.app.workspace.containerEl.find(".workspace-leaf:hover");
                let allLeaves = this.app.workspace.getLeavesOfType("markdown");
                let hoveredLeaf = allLeaves.find(eachLeaf => eachLeaf.containerEl == leafEl);
                let mdView;
                if (hoveredLeaf) {
                    mdView = hoveredLeaf.view;
                }
                if (mdView) {
                    let mdEditor = mdView.editor;
                    let topPos = evt.clientY + 1;
                    //NOTE: mdEditor.posAtCoords(x, y) is equivalent to mdEditor.cm.coordsChar({ left: x, top: y })
                    let thisLine = mdEditor.posAtCoords(0, topPos).line;
                    mdEditor.setSelection({ line: thisLine, ch: 0 }, { line: thisLine, ch: 9999 });
                }
            }
        });
        this.registerDomEvent(actDoc, 'drop', (evt) => {
            if (this.blockRefDragState === 'start') {
                this.blockRefDragState = 'dropped';
                this.blockRefModDrop = { alt: evt.altKey, ctrl: (evt.ctrlKey || evt.metaKey), shift: evt.shiftKey };
            }
        });
    }
    onunload() {
        let oldElem = document.getElementById('block-ref-hover');
        if (oldElem) {
            oldElem.remove();
        }
        console.log("Unloading plugin: " + pluginName);
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class SampleSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Drag and Drop Block Settings' });
        new obsidian.Setting(containerEl)
            .setName('Setting 1')
            .setDesc('This is a placeholder only and doesn\'t do anything at this point')
            .addText(text => text
            .setPlaceholder('N/A')
            .setValue('')
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.mySetting = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
